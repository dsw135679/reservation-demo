syntax="proto3";
package reservation;

import "google/protobuf/timestamp.proto";

// 预约状态
enum ReservationStatus{
  RESERVATION_STATUS_UNKNOWN=0; // 未知状态
  RESERVATION_STATUS_PENDING=1; // 待确认状态
  RESERVATION_STATUS_CONFIRMED=2;// 已确认状态
  RESERVATION_STATUS_BLOCKED=3;// 锁定状态
}

enum ReservationUpdateType{
  RESERVATION_UPDATE_TYPE_UNKNOWN=0;
  RESERVATION_UPDATE_TYPE_CREATE=1;
  RESERVATION_UPDATE_TYPE_UPDATE=2;
  RESERVATION_UPDATE_TYPE_DELETE=3;
}

// 预约资源信息
message Reservation{
  string id=1;
  string user_id=2;
  ReservationStatus status=3;

  // 资源预约信息
  string resource_id=4;
  google.protobuf.Timestamp start=5;
  google.protobuf.Timestamp end=6;

  // 额外信息
  string note=7;
}

message ReserveRequest{
  Reservation reservation=1;
}

message ReserveResponse{
  Reservation reservation=1;
}

message UpdateRequest{
  string node=1;
}

message UpdateResponse{
  Reservation reservation=1;
}

message ConfirmRequest{
  string id=1;
}

message ConfirmResponse{
  Reservation reservation=1;
}

message CancelRequest{
  string id=1;
}

message CancelResponse{
  Reservation reservation=1;
}

message GetRequest{
  string id=1;
}

message GetResponse{
  Reservation reservation=1;
}

// query reservation with user_id, resource_id, start time, end time and status
message ReservationQuery{
  // resource id for the reservation query. If empty, query all resources
  string resource_id=1;
  // user id for the reservation query. If empty, query all users
  string user_id=2;
  // use status to filter result. If UNKNOWN,return all reservations
  ReservationStatus status=3;
  // start time for the reservation query. If 0, use Infinity for start time
  google.protobuf.Timestamp start=4;
  // end time for the reservation query. If 0, use Infinity for end time
  google.protobuf.Timestamp end=5;
  // current page for the query
  int32 page=6;
  // page size for the query
  int32 size=7;
  // sort direction
  bool desc=8;
}

// To query reservations,send a QueryRequest
message QueryRequest{
  ReservationQuery query=1;
}

message ListenRequest{}
message ListenResponse{
  ReservationUpdateType op=1;
  Reservation reservation=2;
}


service ReservationService{
  rpc reserve(ReserveRequest) returns (ReserveResponse);
  rpc confirm(ConfirmRequest) returns (ConfirmResponse);
  rpc update(UpdateRequest) returns (UpdateResponse);
  rpc cancel(CancelRequest) returns (CancelResponse);
  rpc get(GetRequest) returns (GetResponse);
  rpc query(QueryRequest) returns (stream Reservation);
  // another system could monitor newly added/confirmed/cancelled reservations
  rpc listen(ListenRequest) returns (stream ListenResponse);
}
